// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/formancehq/wallets/pkg/client/internal/utils"
	"time"
)

type Balances struct {
	Main AssetHolder `json:"main"`
}

func (o *Balances) GetMain() AssetHolder {
	if o == nil {
		return AssetHolder{}
	}
	return o.Main
}

type Wallet struct {
	// The unique ID of the wallet.
	ID string `json:"id"`
	// Metadata associated with the wallet.
	Metadata  map[string]string `json:"metadata"`
	Name      string            `json:"name"`
	CreatedAt time.Time         `json:"createdAt"`
	Ledger    string            `json:"ledger"`
	Balances  *Balances         `json:"balances,omitempty"`
}

func (w Wallet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *Wallet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Wallet) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Wallet) GetMetadata() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Metadata
}

func (o *Wallet) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Wallet) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Wallet) GetLedger() string {
	if o == nil {
		return ""
	}
	return o.Ledger
}

func (o *Wallet) GetBalances() *Balances {
	if o == nil {
		return nil
	}
	return o.Balances
}
